{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\n\n// Helper function to make API calls\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Something went wrong');\n    }\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Authentication APIs\nexport const authAPI = {\n  register: async userData => {\n    return apiCall('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  },\n  login: async credentials => {\n    return apiCall('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n};\n\n// Complaint APIs\nexport const complaintAPI = {\n  fileComplaint: async complaintData => {\n    return apiCall('/complaint/file', {\n      method: 'POST',\n      body: JSON.stringify(complaintData)\n    });\n  },\n  getComplaintStatus: async userId => {\n    return apiCall(`/complaint/status?userId=${userId}`, {\n      method: 'GET'\n    });\n  },\n  resolveComplaint: async complaintId => {\n    return apiCall('/complaint/resolve', {\n      method: 'POST',\n      body: JSON.stringify({\n        complaintId\n      })\n    });\n  },\n  submitFeedback: async feedbackData => {\n    return apiCall('/complaint/feedback', {\n      method: 'POST',\n      body: JSON.stringify(feedbackData)\n    });\n  }\n};\n\n// Schemes APIs\nexport const schemesAPI = {\n  findSchemes: async userData => {\n    return apiCall('/schemes/find', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n};\n\n// Helpline APIs\nexport const helplineAPI = {\n  getHelplineNumbers: async state => {\n    return apiCall(`/helpline?state=${encodeURIComponent(state)}`, {\n      method: 'GET'\n    });\n  }\n};\n\n// AI Simulation APIs (placeholder functions)\nexport const aiAPI = {\n  // Fallback transcription for when Web Speech API is not available\n  transcribeAudio: async audioBlob => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Return dummy transcription with more variety\n    const dummyTranscriptions = [\n    // Hindi\n    \"हमारे इलाके में पानी लीक हो रहा है\", \"गली में कूड़ा फैला हुआ है\", \"सड़क पर गड्ढे हैं\", \"बिजली नहीं आ रही है\", \"सीवर लाइन टूट गई है\", \"स्ट्रीट लाइट काम नहीं कर रही है\", \"पार्क में पेड़ टूट गया है\", \"ड्रेन में पानी भर गया है\", \"सड़क पर ट्रैफिक जाम है\", \"पार्किंग में गाड़ियां गलत तरीके से खड़ी हैं\",\n    // Punjabi\n    \"ਸਾਡੇ ਇਲਾਕੇ ਵਿੱਚ ਪਾਣੀ ਲੀਕ ਹੋ ਰਿਹਾ ਹੈ\", \"ਗਲੀ ਵਿੱਚ ਕੂੜਾ ਫੈਲਿਆ ਹੋਇਆ ਹੈ\", \"ਸੜਕ ਤੇ ਗੱਡੇ ਹਨ\", \"ਬਿਜਲੀ ਨਹੀਂ ਆ ਰਹੀ ਹੈ\", \"ਸੀਵਰ ਲਾਈਨ ਟੁੱਟ ਗਈ ਹੈ\",\n    // Kannada\n    \"ನಮ್ಮ ಪ್ರದೇಶದಲ್ಲಿ ನೀರು ಸೋರುತ್ತಿದೆ\", \"ರಸ್ತೆಯಲ್ಲಿ ಕಸ ಹರಡಿಕೊಂಡಿದೆ\", \"ರಸ್ತೆಯಲ್ಲಿ ಕುಳಿಗಳಿವೆ\", \"ವಿದ್ಯುತ್ ಬರುವುದಿಲ್ಲ\", \"ಸೀವರ್ ಲೈನ್ ಮುರಿದಿದೆ\",\n    // Haryanvi\n    \"हमारे इलाके में पानी लीक हो रया है\", \"गली में कूड़ा फैल्या है\", \"सड़क पर गड्ढे हैं\", \"बिजली नहीं आ रही\", \"सीवर लाइन टूट गई है\"];\n    return {\n      text: dummyTranscriptions[Math.floor(Math.random() * dummyTranscriptions.length)]\n    };\n  },\n  // Simulate CLIP/SAM API for image analysis\n  analyzeImage: async imageFile => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Return dummy analysis\n    const dummyAnalyses = [\"Image shows garbage overflow in residential area\", \"Image shows water leak from pipeline\", \"Image shows broken street light\", \"Image shows potholes on road\", \"Image shows sewage overflow\"];\n    return {\n      description: dummyAnalyses[Math.floor(Math.random() * dummyAnalyses.length)],\n      confidence: 0.85 + Math.random() * 0.1\n    };\n  },\n  // Generate complaint draft using Gemini AI\n  generateComplaintDraft: async inputs => {\n    const {\n      userInfo,\n      address,\n      issueDescription,\n      category,\n      region\n    } = inputs;\n    try {\n      // Call backend API to generate draft using Gemini AI\n      const response = await apiCall('/complaint/generate-draft', {\n        method: 'POST',\n        body: JSON.stringify({\n          userInfo,\n          address,\n          issueDescription,\n          category,\n          region\n        })\n      });\n\n      // Check if the response contains an error message\n      if (response.draft && response.draft.startsWith('Error generating complaint draft:')) {\n        console.warn('AI generation failed, using fallback template');\n        throw new Error('AI generation failed');\n      }\n      return response;\n    } catch (error) {\n      console.error('Failed to generate AI draft:', error);\n      // Fallback to dynamic template if AI generation fails\n      const subjectVariations = [`Complaint regarding ${category} issue in ${region}`, `Urgent: ${category} problem in ${region}`, `Request for immediate action on ${category} issue`, `Complaint about ${category} services in ${region}`, `Report of ${category} issue requiring attention`];\n      const openingVariations = [`Dear ${category} Department,`, `To the ${category} Department,`, `Respected ${category} Department,`, `Dear Sir/Madam of ${category} Department,`, `To Whom It May Concern,`];\n      const urgencyVariations = [\"requires immediate attention\", \"needs urgent intervention\", \"demands prompt action\", \"calls for immediate resolution\", \"requires your immediate attention\"];\n      const impactVariations = [\"This issue is affecting the daily lives of residents in our area and requires prompt action from your department.\", \"The situation is causing significant inconvenience to the local community and needs immediate resolution.\", \"This problem is impacting the quality of life for residents and requires urgent attention.\", \"The issue is creating difficulties for the neighborhood and needs prompt intervention.\", \"This matter is affecting public welfare and requires immediate action from your department.\"];\n      const closingVariations = [\"I kindly request you to investigate this matter and take necessary steps to resolve it at the earliest.\", \"I would appreciate if you could look into this issue and take appropriate action as soon as possible.\", \"Please consider this matter urgent and take the necessary steps to address it promptly.\", \"I hope you will give this issue the attention it deserves and resolve it quickly.\", \"I trust you will investigate this matter thoroughly and implement a solution without delay.\"];\n      const thankYouVariations = [\"Thank you for your attention to this issue.\", \"I appreciate your time and consideration in this matter.\", \"Thank you for taking the time to address this concern.\", \"I look forward to your response and action on this matter.\", \"Thank you for your cooperation in resolving this issue.\"];\n      const signOffVariations = [\"Best regards,\", \"Sincerely,\", \"Yours faithfully,\", \"Respectfully yours,\", \"Thank you,\"];\n\n      // Randomly select variations\n      const subject = subjectVariations[Math.floor(Math.random() * subjectVariations.length)];\n      const opening = openingVariations[Math.floor(Math.random() * openingVariations.length)];\n      const urgency = urgencyVariations[Math.floor(Math.random() * urgencyVariations.length)];\n      const impact = impactVariations[Math.floor(Math.random() * impactVariations.length)];\n      const closing = closingVariations[Math.floor(Math.random() * closingVariations.length)];\n      const thankYou = thankYouVariations[Math.floor(Math.random() * thankYouVariations.length)];\n      const signOff = signOffVariations[Math.floor(Math.random() * signOffVariations.length)];\n\n      // Generate different body content based on category\n      let bodyContent = \"\";\n      if (category.toLowerCase().includes('water') || category.toLowerCase().includes('sanitation') || category.toLowerCase().includes('sewage')) {\n        bodyContent = `I am writing to bring to your attention a ${category.toLowerCase()} issue that ${urgency} in our area.\\n\\n`;\n      } else if (category.toLowerCase().includes('electricity') || category.toLowerCase().includes('power')) {\n        bodyContent = `I am writing to report a ${category.toLowerCase()} problem that ${urgency} in our locality.\\n\\n`;\n      } else if (category.toLowerCase().includes('roads') || category.toLowerCase().includes('transport')) {\n        bodyContent = `I am writing to bring to your notice a ${category.toLowerCase()} issue that ${urgency} in our area.\\n\\n`;\n      } else if (category.toLowerCase().includes('garbage') || category.toLowerCase().includes('waste')) {\n        bodyContent = `I am writing to report a ${category.toLowerCase()} management issue that ${urgency} in our neighborhood.\\n\\n`;\n      } else {\n        bodyContent = `I am writing to bring to your attention a ${category.toLowerCase()} issue that ${urgency} in our area.\\n\\n`;\n      }\n      const draft = `Subject: ${subject}\n\n${opening}\n\n${bodyContent}Issue Details:\n- Category: ${category}\n- Description: ${issueDescription}\n- Location: ${address.houseNo}, ${address.addressLine1}, ${address.addressLine2}, PIN: ${address.pinCode}\n- Region: ${region}\n\nPersonal Information:\n- Name: ${userInfo.fullName}\n- Contact: ${userInfo.mobile}\n- Email: ${userInfo.email}\n\n${impact} ${closing}\n\n${thankYou}\n\n${signOff}\n${userInfo.fullName}\n${userInfo.mobile}`;\n      return {\n        draft,\n        authority: {\n          name: `${category} Department - Municipal Corporation`,\n          email: `${category.toLowerCase().replace(' ', '.')}@examplecity.gov.in`,\n          phone: `+91-22-${Math.floor(Math.random() * 90000000) + 10000000}`\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","apiCall","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","console","authAPI","register","userData","method","body","JSON","stringify","login","credentials","complaintAPI","fileComplaint","complaintData","getComplaintStatus","userId","resolveComplaint","complaintId","submitFeedback","feedbackData","schemesAPI","findSchemes","helplineAPI","getHelplineNumbers","state","encodeURIComponent","aiAPI","transcribeAudio","audioBlob","Promise","resolve","setTimeout","dummyTranscriptions","text","Math","floor","random","length","analyzeImage","imageFile","dummyAnalyses","description","confidence","generateComplaintDraft","inputs","userInfo","address","issueDescription","category","region","draft","startsWith","warn","subjectVariations","openingVariations","urgencyVariations","impactVariations","closingVariations","thankYouVariations","signOffVariations","subject","opening","urgency","impact","closing","thankYou","signOff","bodyContent","toLowerCase","includes","houseNo","addressLine1","addressLine2","pinCode","fullName","mobile","email","authority","name","replace","phone"],"sources":["C:/Users/ASUS/OneDrive/Desktop/janai/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Helper function to make API calls\r\nconst apiCall = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.error || 'Something went wrong');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Authentication APIs\r\nexport const authAPI = {\r\n  register: async (userData) => {\r\n    return apiCall('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  },\r\n\r\n  login: async (credentials) => {\r\n    return apiCall('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n  },\r\n};\r\n\r\n// Complaint APIs\r\nexport const complaintAPI = {\r\n  fileComplaint: async (complaintData) => {\r\n    return apiCall('/complaint/file', {\r\n      method: 'POST',\r\n      body: JSON.stringify(complaintData),\r\n    });\r\n  },\r\n\r\n  getComplaintStatus: async (userId) => {\r\n    return apiCall(`/complaint/status?userId=${userId}`, {\r\n      method: 'GET',\r\n    });\r\n  },\r\n\r\n  resolveComplaint: async (complaintId) => {\r\n    return apiCall('/complaint/resolve', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ complaintId }),\r\n    });\r\n  },\r\n\r\n  submitFeedback: async (feedbackData) => {\r\n    return apiCall('/complaint/feedback', {\r\n      method: 'POST',\r\n      body: JSON.stringify(feedbackData),\r\n    });\r\n  },\r\n};\r\n\r\n// Schemes APIs\r\nexport const schemesAPI = {\r\n  findSchemes: async (userData) => {\r\n    return apiCall('/schemes/find', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  },\r\n};\r\n\r\n// Helpline APIs\r\nexport const helplineAPI = {\r\n  getHelplineNumbers: async (state) => {\r\n    return apiCall(`/helpline?state=${encodeURIComponent(state)}`, {\r\n      method: 'GET',\r\n    });\r\n  },\r\n};\r\n\r\n// AI Simulation APIs (placeholder functions)\r\nexport const aiAPI = {\r\n  // Fallback transcription for when Web Speech API is not available\r\n  transcribeAudio: async (audioBlob) => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Return dummy transcription with more variety\r\n    const dummyTranscriptions = [\r\n      // Hindi\r\n      \"हमारे इलाके में पानी लीक हो रहा है\",\r\n      \"गली में कूड़ा फैला हुआ है\",\r\n      \"सड़क पर गड्ढे हैं\",\r\n      \"बिजली नहीं आ रही है\",\r\n      \"सीवर लाइन टूट गई है\",\r\n      \"स्ट्रीट लाइट काम नहीं कर रही है\",\r\n      \"पार्क में पेड़ टूट गया है\",\r\n      \"ड्रेन में पानी भर गया है\",\r\n      \"सड़क पर ट्रैफिक जाम है\",\r\n      \"पार्किंग में गाड़ियां गलत तरीके से खड़ी हैं\",\r\n      // Punjabi\r\n      \"ਸਾਡੇ ਇਲਾਕੇ ਵਿੱਚ ਪਾਣੀ ਲੀਕ ਹੋ ਰਿਹਾ ਹੈ\",\r\n      \"ਗਲੀ ਵਿੱਚ ਕੂੜਾ ਫੈਲਿਆ ਹੋਇਆ ਹੈ\",\r\n      \"ਸੜਕ ਤੇ ਗੱਡੇ ਹਨ\",\r\n      \"ਬਿਜਲੀ ਨਹੀਂ ਆ ਰਹੀ ਹੈ\",\r\n      \"ਸੀਵਰ ਲਾਈਨ ਟੁੱਟ ਗਈ ਹੈ\",\r\n      // Kannada\r\n      \"ನಮ್ಮ ಪ್ರದೇಶದಲ್ಲಿ ನೀರು ಸೋರುತ್ತಿದೆ\",\r\n      \"ರಸ್ತೆಯಲ್ಲಿ ಕಸ ಹರಡಿಕೊಂಡಿದೆ\",\r\n      \"ರಸ್ತೆಯಲ್ಲಿ ಕುಳಿಗಳಿವೆ\",\r\n      \"ವಿದ್ಯುತ್ ಬರುವುದಿಲ್ಲ\",\r\n      \"ಸೀವರ್ ಲೈನ್ ಮುರಿದಿದೆ\",\r\n      // Haryanvi\r\n      \"हमारे इलाके में पानी लीक हो रया है\",\r\n      \"गली में कूड़ा फैल्या है\",\r\n      \"सड़क पर गड्ढे हैं\",\r\n      \"बिजली नहीं आ रही\",\r\n      \"सीवर लाइन टूट गई है\"\r\n    ];\r\n    \r\n    return {\r\n      text: dummyTranscriptions[Math.floor(Math.random() * dummyTranscriptions.length)]\r\n    };\r\n  },\r\n\r\n  // Simulate CLIP/SAM API for image analysis\r\n  analyzeImage: async (imageFile) => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1500));\r\n    \r\n    // Return dummy analysis\r\n    const dummyAnalyses = [\r\n      \"Image shows garbage overflow in residential area\",\r\n      \"Image shows water leak from pipeline\",\r\n      \"Image shows broken street light\",\r\n      \"Image shows potholes on road\",\r\n      \"Image shows sewage overflow\"\r\n    ];\r\n    \r\n    return {\r\n      description: dummyAnalyses[Math.floor(Math.random() * dummyAnalyses.length)],\r\n      confidence: 0.85 + Math.random() * 0.1\r\n    };\r\n  },\r\n\r\n  // Generate complaint draft using Gemini AI\r\n  generateComplaintDraft: async (inputs) => {\r\n    const { userInfo, address, issueDescription, category, region } = inputs;\r\n    \r\n    try {\r\n      // Call backend API to generate draft using Gemini AI\r\n      const response = await apiCall('/complaint/generate-draft', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          userInfo,\r\n          address,\r\n          issueDescription,\r\n          category,\r\n          region\r\n        }),\r\n      });\r\n      \r\n      // Check if the response contains an error message\r\n      if (response.draft && response.draft.startsWith('Error generating complaint draft:')) {\r\n        console.warn('AI generation failed, using fallback template');\r\n        throw new Error('AI generation failed');\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Failed to generate AI draft:', error);\r\n      // Fallback to dynamic template if AI generation fails\r\n      const subjectVariations = [\r\n        `Complaint regarding ${category} issue in ${region}`,\r\n        `Urgent: ${category} problem in ${region}`,\r\n        `Request for immediate action on ${category} issue`,\r\n        `Complaint about ${category} services in ${region}`,\r\n        `Report of ${category} issue requiring attention`\r\n      ];\r\n      \r\n      const openingVariations = [\r\n        `Dear ${category} Department,`,\r\n        `To the ${category} Department,`,\r\n        `Respected ${category} Department,`,\r\n        `Dear Sir/Madam of ${category} Department,`,\r\n        `To Whom It May Concern,`\r\n      ];\r\n      \r\n      const urgencyVariations = [\r\n        \"requires immediate attention\",\r\n        \"needs urgent intervention\", \r\n        \"demands prompt action\",\r\n        \"calls for immediate resolution\",\r\n        \"requires your immediate attention\"\r\n      ];\r\n      \r\n      const impactVariations = [\r\n        \"This issue is affecting the daily lives of residents in our area and requires prompt action from your department.\",\r\n        \"The situation is causing significant inconvenience to the local community and needs immediate resolution.\",\r\n        \"This problem is impacting the quality of life for residents and requires urgent attention.\",\r\n        \"The issue is creating difficulties for the neighborhood and needs prompt intervention.\",\r\n        \"This matter is affecting public welfare and requires immediate action from your department.\"\r\n      ];\r\n      \r\n      const closingVariations = [\r\n        \"I kindly request you to investigate this matter and take necessary steps to resolve it at the earliest.\",\r\n        \"I would appreciate if you could look into this issue and take appropriate action as soon as possible.\",\r\n        \"Please consider this matter urgent and take the necessary steps to address it promptly.\",\r\n        \"I hope you will give this issue the attention it deserves and resolve it quickly.\",\r\n        \"I trust you will investigate this matter thoroughly and implement a solution without delay.\"\r\n      ];\r\n      \r\n      const thankYouVariations = [\r\n        \"Thank you for your attention to this issue.\",\r\n        \"I appreciate your time and consideration in this matter.\",\r\n        \"Thank you for taking the time to address this concern.\",\r\n        \"I look forward to your response and action on this matter.\",\r\n        \"Thank you for your cooperation in resolving this issue.\"\r\n      ];\r\n      \r\n      const signOffVariations = [\r\n        \"Best regards,\",\r\n        \"Sincerely,\",\r\n        \"Yours faithfully,\",\r\n        \"Respectfully yours,\",\r\n        \"Thank you,\"\r\n      ];\r\n      \r\n      // Randomly select variations\r\n      const subject = subjectVariations[Math.floor(Math.random() * subjectVariations.length)];\r\n      const opening = openingVariations[Math.floor(Math.random() * openingVariations.length)];\r\n      const urgency = urgencyVariations[Math.floor(Math.random() * urgencyVariations.length)];\r\n      const impact = impactVariations[Math.floor(Math.random() * impactVariations.length)];\r\n      const closing = closingVariations[Math.floor(Math.random() * closingVariations.length)];\r\n      const thankYou = thankYouVariations[Math.floor(Math.random() * thankYouVariations.length)];\r\n      const signOff = signOffVariations[Math.floor(Math.random() * signOffVariations.length)];\r\n      \r\n      // Generate different body content based on category\r\n      let bodyContent = \"\";\r\n      if (category.toLowerCase().includes('water') || category.toLowerCase().includes('sanitation') || category.toLowerCase().includes('sewage')) {\r\n        bodyContent = `I am writing to bring to your attention a ${category.toLowerCase()} issue that ${urgency} in our area.\\n\\n`;\r\n      } else if (category.toLowerCase().includes('electricity') || category.toLowerCase().includes('power')) {\r\n        bodyContent = `I am writing to report a ${category.toLowerCase()} problem that ${urgency} in our locality.\\n\\n`;\r\n      } else if (category.toLowerCase().includes('roads') || category.toLowerCase().includes('transport')) {\r\n        bodyContent = `I am writing to bring to your notice a ${category.toLowerCase()} issue that ${urgency} in our area.\\n\\n`;\r\n      } else if (category.toLowerCase().includes('garbage') || category.toLowerCase().includes('waste')) {\r\n        bodyContent = `I am writing to report a ${category.toLowerCase()} management issue that ${urgency} in our neighborhood.\\n\\n`;\r\n      } else {\r\n        bodyContent = `I am writing to bring to your attention a ${category.toLowerCase()} issue that ${urgency} in our area.\\n\\n`;\r\n      }\r\n      \r\n      const draft = `Subject: ${subject}\r\n\r\n${opening}\r\n\r\n${bodyContent}Issue Details:\r\n- Category: ${category}\r\n- Description: ${issueDescription}\r\n- Location: ${address.houseNo}, ${address.addressLine1}, ${address.addressLine2}, PIN: ${address.pinCode}\r\n- Region: ${region}\r\n\r\nPersonal Information:\r\n- Name: ${userInfo.fullName}\r\n- Contact: ${userInfo.mobile}\r\n- Email: ${userInfo.email}\r\n\r\n${impact} ${closing}\r\n\r\n${thankYou}\r\n\r\n${signOff}\r\n${userInfo.fullName}\r\n${userInfo.mobile}`;\r\n\r\n      return {\r\n        draft,\r\n        authority: {\r\n          name: `${category} Department - Municipal Corporation`,\r\n          email: `${category.toLowerCase().replace(' ', '.')}@examplecity.gov.in`,\r\n          phone: `+91-22-${Math.floor(Math.random() * 90000000) + 10000000}`\r\n        }\r\n      };\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}