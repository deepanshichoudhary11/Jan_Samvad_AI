{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\janai\\\\frontend\\\\src\\\\components\\\\VoiceToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { voiceAPI } from '../services/api';\nimport './VoiceToText.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceToText = ({\n  onVoiceResult,\n  userState,\n  userLanguage\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('hi-IN');\n  const [helplineNumbers, setHelplineNumbers] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [supportedLanguages, setSupportedLanguages] = useState([]);\n  const [recognition, setRecognition] = useState(null);\n  const [showHelplines, setShowHelplines] = useState(false);\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    // Load supported languages\n    loadSupportedLanguages();\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }, []);\n  const loadSupportedLanguages = async () => {\n    try {\n      const response = await voiceAPI.getLanguageSupport();\n      if (response.success) {\n        setSupportedLanguages(response.supported_languages);\n      }\n    } catch (error) {\n      console.error('Error loading supported languages:', error);\n    }\n  };\n  const initializeSpeechRecognition = () => {\n    if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\n      setError('Speech recognition is not supported in this browser');\n      return;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognitionInstance = new SpeechRecognition();\n    recognitionInstance.continuous = true;\n    recognitionInstance.interimResults = true;\n    recognitionInstance.lang = selectedLanguage;\n    recognitionInstance.onstart = () => {\n      setIsRecording(true);\n      setError('');\n    };\n    recognitionInstance.onresult = event => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n      if (finalTranscript) {\n        setVoiceText(finalTranscript);\n        processVoiceInput(finalTranscript);\n      }\n    };\n    recognitionInstance.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      setError(`Voice recognition error: ${event.error}`);\n      setIsRecording(false);\n    };\n    recognitionInstance.onend = () => {\n      setIsRecording(false);\n    };\n    setRecognition(recognitionInstance);\n  };\n  const startRecording = () => {\n    if (!recognition) {\n      setError('Speech recognition not initialized');\n      return;\n    }\n    setVoiceText('');\n    setHelplineNumbers([]);\n    setError('');\n    setShowHelplines(false);\n    try {\n      recognition.start();\n    } catch (error) {\n      setError('Failed to start recording. Please try again.');\n    }\n  };\n  const stopRecording = () => {\n    if (recognition) {\n      recognition.stop();\n    }\n  };\n  const processVoiceInput = async text => {\n    if (!text.trim()) return;\n    setIsProcessing(true);\n    setError('');\n    try {\n      const response = await voiceAPI.voiceToText({\n        text: text,\n        state: userState,\n        language: selectedLanguage\n      });\n      if (response.success) {\n        setHelplineNumbers(response.state_helplines);\n        setShowHelplines(true);\n\n        // Call parent callback with results\n        if (onVoiceResult) {\n          onVoiceResult({\n            text: text,\n            selectedLanguage: selectedLanguage,\n            helplineNumbers: response.state_helplines,\n            aiAnalysis: response.ai_analysis,\n            multilingualResponse: response.multilingual_response\n          });\n        }\n      }\n    } catch (error) {\n      setError('Failed to process voice input. Please try again.');\n      console.error('Voice processing error:', error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const analyzeWithGemini = async () => {\n    if (!voiceText.trim()) {\n      setError('Please record some voice input first before analyzing.');\n      return;\n    }\n    setIsProcessing(true);\n    setError('');\n    try {\n      const response = await voiceAPI.analyzeWithGemini({\n        text: voiceText,\n        state: userState,\n        language: selectedLanguage\n      });\n      if (response.success) {\n        setHelplineNumbers(response.state_helplines);\n        setShowHelplines(true);\n\n        // Call parent callback with results\n        if (onVoiceResult) {\n          onVoiceResult({\n            text: voiceText,\n            selectedLanguage: selectedLanguage,\n            helplineNumbers: response.state_helplines,\n            aiAnalysis: response.ai_analysis,\n            multilingualResponse: response.multilingual_response\n          });\n        }\n      }\n    } catch (error) {\n      setError('Failed to analyze with Gemini. Please try again.');\n      console.error('Gemini analysis error:', error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handleLanguageChange = e => {\n    const newLanguage = e.target.value;\n    setSelectedLanguage(newLanguage);\n    if (recognition) {\n      recognition.lang = newLanguage;\n    }\n  };\n  const getLanguageDisplayName = languageCode => {\n    const language = supportedLanguages.find(lang => lang.language_code === languageCode);\n    return language ? language.native_name : languageCode;\n  };\n  const formatHelplineNumber = (service, number) => {\n    const serviceNames = {\n      'emergency': 'Emergency',\n      'ambulance': 'Ambulance',\n      'police': 'Police',\n      'fire': 'Fire',\n      'women_helpline': 'Women Helpline',\n      'cm_helpline': 'CM Helpline',\n      'electricity': 'Electricity',\n      'transport': 'Transport',\n      'food_supply': 'Food Supply',\n      'water_supply': 'Water Supply'\n    };\n    return {\n      service: serviceNames[service] || service.replace('_', ' ').toUpperCase(),\n      number: number\n    };\n  };\n  const getRegionFromLanguage = languageCode => {\n    const languageRegionMap = {\n      'hi-IN': 'Uttar Pradesh',\n      'mr-IN': 'Maharashtra',\n      'ta-IN': 'Tamil Nadu',\n      'te-IN': 'Andhra Pradesh',\n      'gu-IN': 'Gujarat',\n      'bn-IN': 'West Bengal',\n      'ml-IN': 'Kerala',\n      'ur-IN': 'Delhi',\n      'pa-IN': 'Punjab',\n      'kn-IN': 'Karnataka'\n    };\n    return languageRegionMap[languageCode] || 'India';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-to-text-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"language-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"language-select\",\n          children: \"Choose Your Language:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"language-select\",\n          value: selectedLanguage,\n          onChange: handleLanguageChange,\n          disabled: isRecording,\n          children: supportedLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: lang.language_code,\n            children: [lang.native_name, \" (\", lang.language, \")\"]\n          }, lang.language_code, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-region\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Selected Region:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), \" \", getRegionFromLanguage(selectedLanguage)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `record-button ${isRecording ? 'recording' : ''}`,\n          onClick: isRecording ? stopRecording : startRecording,\n          disabled: isProcessing,\n          children: isRecording ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"recording-indicator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), \"Stop Recording\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"microphone-icon\",\n              children: \"\\uD83C\\uDFA4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this), \"Start Recording\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-message\",\n      children: \"Processing voice input...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this), voiceText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-text-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Voice Input:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"voice-text\",\n          children: voiceText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), showHelplines && helplineNumbers && Object.keys(helplineNumbers).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"helpline-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Helpline Numbers for \", getRegionFromLanguage(selectedLanguage), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"helpline-grid\",\n          children: Object.entries(helplineNumbers).map(([service, number]) => {\n            const formatted = formatHelplineNumber(service, number);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"helpline-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"helpline-service\",\n                children: formatted.service\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"helpline-number\",\n                children: formatted.number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 23\n              }, this)]\n            }, service, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceToText, \"Pe2keCKPB03NvSw5CcWVAwpBbPM=\");\n_c = VoiceToText;\nexport default VoiceToText;\nvar _c;\n$RefreshReg$(_c, \"VoiceToText\");","map":{"version":3,"names":["React","useState","useRef","useEffect","voiceAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceToText","onVoiceResult","userState","userLanguage","_s","isRecording","setIsRecording","voiceText","setVoiceText","selectedLanguage","setSelectedLanguage","helplineNumbers","setHelplineNumbers","isProcessing","setIsProcessing","error","setError","supportedLanguages","setSupportedLanguages","recognition","setRecognition","showHelplines","setShowHelplines","recognitionRef","loadSupportedLanguages","initializeSpeechRecognition","response","getLanguageSupport","success","supported_languages","console","window","SpeechRecognition","webkitSpeechRecognition","recognitionInstance","continuous","interimResults","lang","onstart","onresult","event","finalTranscript","interimTranscript","i","resultIndex","results","length","transcript","isFinal","processVoiceInput","onerror","onend","startRecording","start","stopRecording","stop","text","trim","voiceToText","state","language","state_helplines","aiAnalysis","ai_analysis","multilingualResponse","multilingual_response","analyzeWithGemini","handleLanguageChange","e","newLanguage","target","value","getLanguageDisplayName","languageCode","find","language_code","native_name","formatHelplineNumber","service","number","serviceNames","replace","toUpperCase","getRegionFromLanguage","languageRegionMap","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","disabled","map","onClick","Object","keys","entries","formatted","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Desktop/janai/frontend/src/components/VoiceToText.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { voiceAPI } from '../services/api';\r\nimport './VoiceToText.css';\r\n\r\nconst VoiceToText = ({ onVoiceResult, userState, userLanguage }) => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [voiceText, setVoiceText] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('hi-IN');\r\n  const [helplineNumbers, setHelplineNumbers] = useState([]);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [supportedLanguages, setSupportedLanguages] = useState([]);\r\n  const [recognition, setRecognition] = useState(null);\r\n  const [showHelplines, setShowHelplines] = useState(false);\r\n\r\n  const recognitionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Load supported languages\r\n    loadSupportedLanguages();\r\n    \r\n    // Initialize speech recognition\r\n    initializeSpeechRecognition();\r\n  }, []);\r\n\r\n  const loadSupportedLanguages = async () => {\r\n    try {\r\n      const response = await voiceAPI.getLanguageSupport();\r\n      if (response.success) {\r\n        setSupportedLanguages(response.supported_languages);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading supported languages:', error);\r\n    }\r\n  };\r\n\r\n  const initializeSpeechRecognition = () => {\r\n    if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {\r\n      setError('Speech recognition is not supported in this browser');\r\n      return;\r\n    }\r\n\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognitionInstance = new SpeechRecognition();\r\n    \r\n    recognitionInstance.continuous = true;\r\n    recognitionInstance.interimResults = true;\r\n    recognitionInstance.lang = selectedLanguage;\r\n    \r\n    recognitionInstance.onstart = () => {\r\n      setIsRecording(true);\r\n      setError('');\r\n    };\r\n\r\n    recognitionInstance.onresult = (event) => {\r\n      let finalTranscript = '';\r\n      let interimTranscript = '';\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript += transcript;\r\n        } else {\r\n          interimTranscript += transcript;\r\n        }\r\n      }\r\n\r\n      if (finalTranscript) {\r\n        setVoiceText(finalTranscript);\r\n        processVoiceInput(finalTranscript);\r\n      }\r\n    };\r\n\r\n    recognitionInstance.onerror = (event) => {\r\n      console.error('Speech recognition error:', event.error);\r\n      setError(`Voice recognition error: ${event.error}`);\r\n      setIsRecording(false);\r\n    };\r\n\r\n    recognitionInstance.onend = () => {\r\n      setIsRecording(false);\r\n    };\r\n\r\n    setRecognition(recognitionInstance);\r\n  };\r\n\r\n  const startRecording = () => {\r\n    if (!recognition) {\r\n      setError('Speech recognition not initialized');\r\n      return;\r\n    }\r\n\r\n    setVoiceText('');\r\n    setHelplineNumbers([]);\r\n    setError('');\r\n    setShowHelplines(false);\r\n\r\n    try {\r\n      recognition.start();\r\n    } catch (error) {\r\n      setError('Failed to start recording. Please try again.');\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (recognition) {\r\n      recognition.stop();\r\n    }\r\n  };\r\n\r\n  const processVoiceInput = async (text) => {\r\n    if (!text.trim()) return;\r\n\r\n    setIsProcessing(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await voiceAPI.voiceToText({\r\n        text: text,\r\n        state: userState,\r\n        language: selectedLanguage\r\n      });\r\n\r\n      if (response.success) {\r\n        setHelplineNumbers(response.state_helplines);\r\n        setShowHelplines(true);\r\n        \r\n        // Call parent callback with results\r\n        if (onVoiceResult) {\r\n          onVoiceResult({\r\n            text: text,\r\n            selectedLanguage: selectedLanguage,\r\n            helplineNumbers: response.state_helplines,\r\n            aiAnalysis: response.ai_analysis,\r\n            multilingualResponse: response.multilingual_response\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setError('Failed to process voice input. Please try again.');\r\n      console.error('Voice processing error:', error);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const analyzeWithGemini = async () => {\r\n    if (!voiceText.trim()) {\r\n      setError('Please record some voice input first before analyzing.');\r\n      return;\r\n    }\r\n\r\n    setIsProcessing(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await voiceAPI.analyzeWithGemini({\r\n        text: voiceText,\r\n        state: userState,\r\n        language: selectedLanguage\r\n      });\r\n\r\n      if (response.success) {\r\n        setHelplineNumbers(response.state_helplines);\r\n        setShowHelplines(true);\r\n        \r\n        // Call parent callback with results\r\n        if (onVoiceResult) {\r\n          onVoiceResult({\r\n            text: voiceText,\r\n            selectedLanguage: selectedLanguage,\r\n            helplineNumbers: response.state_helplines,\r\n            aiAnalysis: response.ai_analysis,\r\n            multilingualResponse: response.multilingual_response\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setError('Failed to analyze with Gemini. Please try again.');\r\n      console.error('Gemini analysis error:', error);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleLanguageChange = (e) => {\r\n    const newLanguage = e.target.value;\r\n    setSelectedLanguage(newLanguage);\r\n    \r\n    if (recognition) {\r\n      recognition.lang = newLanguage;\r\n    }\r\n  };\r\n\r\n  const getLanguageDisplayName = (languageCode) => {\r\n    const language = supportedLanguages.find(lang => lang.language_code === languageCode);\r\n    return language ? language.native_name : languageCode;\r\n  };\r\n\r\n  const formatHelplineNumber = (service, number) => {\r\n    const serviceNames = {\r\n      'emergency': 'Emergency',\r\n      'ambulance': 'Ambulance',\r\n      'police': 'Police',\r\n      'fire': 'Fire',\r\n      'women_helpline': 'Women Helpline',\r\n      'cm_helpline': 'CM Helpline',\r\n      'electricity': 'Electricity',\r\n      'transport': 'Transport',\r\n      'food_supply': 'Food Supply',\r\n      'water_supply': 'Water Supply'\r\n    };\r\n    \r\n    return {\r\n      service: serviceNames[service] || service.replace('_', ' ').toUpperCase(),\r\n      number: number\r\n    };\r\n  };\r\n\r\n  const getRegionFromLanguage = (languageCode) => {\r\n    const languageRegionMap = {\r\n      'hi-IN': 'Uttar Pradesh',\r\n      'mr-IN': 'Maharashtra',\r\n      'ta-IN': 'Tamil Nadu',\r\n      'te-IN': 'Andhra Pradesh',\r\n      'gu-IN': 'Gujarat',\r\n      'bn-IN': 'West Bengal',\r\n      'ml-IN': 'Kerala',\r\n      'ur-IN': 'Delhi',\r\n      'pa-IN': 'Punjab',\r\n      'kn-IN': 'Karnataka'\r\n    };\r\n    return languageRegionMap[languageCode] || 'India';\r\n  };\r\n\r\n  return (\r\n    <div className=\"voice-to-text-container\">\r\n      <div className=\"voice-controls\">\r\n        <div className=\"language-selector\">\r\n          <label htmlFor=\"language-select\">Choose Your Language:</label>\r\n          <select \r\n            id=\"language-select\" \r\n            value={selectedLanguage} \r\n            onChange={handleLanguageChange}\r\n            disabled={isRecording}\r\n          >\r\n            {supportedLanguages.map((lang) => (\r\n              <option key={lang.language_code} value={lang.language_code}>\r\n                {lang.native_name} ({lang.language})\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <div className=\"selected-region\">\r\n            <strong>Selected Region:</strong> {getRegionFromLanguage(selectedLanguage)}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"recording-controls\">\r\n          <button\r\n            className={`record-button ${isRecording ? 'recording' : ''}`}\r\n            onClick={isRecording ? stopRecording : startRecording}\r\n            disabled={isProcessing}\r\n          >\r\n            {isRecording ? (\r\n              <>\r\n                <span className=\"recording-indicator\"></span>\r\n                Stop Recording\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"microphone-icon\">🎤</span>\r\n                Start Recording\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {isProcessing && (\r\n        <div className=\"processing-message\">\r\n          Processing voice input...\r\n        </div>\r\n      )}\r\n\r\n      {voiceText && (\r\n        <div className=\"voice-results\">\r\n          <div className=\"voice-text-section\">\r\n            <h3>Voice Input:</h3>\r\n            <p className=\"voice-text\">{voiceText}</p>\r\n          </div>\r\n\r\n          {showHelplines && helplineNumbers && Object.keys(helplineNumbers).length > 0 && (\r\n            <div className=\"helpline-section\">\r\n              <h3>Helpline Numbers for {getRegionFromLanguage(selectedLanguage)}:</h3>\r\n              <div className=\"helpline-grid\">\r\n                {Object.entries(helplineNumbers).map(([service, number]) => {\r\n                  const formatted = formatHelplineNumber(service, number);\r\n                  return (\r\n                    <div key={service} className=\"helpline-item\">\r\n                      <div className=\"helpline-service\">{formatted.service}</div>\r\n                      <div className=\"helpline-number\">{formatted.number}</div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoiceToText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}